name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Build and test all packages
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build all packages
      run: pnpm build
    
    - name: Run unit tests
      run: pnpm test
    
    - name: Run linting
      run: pnpm lint
      continue-on-error: true  # Don't fail CI for linting issues
    
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          packages/*/dist
          apps/*/dist
        key: ${{ runner.os }}-build-${{ github.sha }}

  # Job 2: End-to-End Testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: |
          packages/*/dist
          apps/*/dist
        key: ${{ runner.os }}-build-${{ github.sha }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages (if cache miss)
      run: pnpm build
    
    - name: Run E2E tests
      run: pnpm test:e2e:ci
      timeout-minutes: 10
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/coverage/
          tests/junit.xml
        retention-days: 30

  # Job 3: FlowLock Self-Audit
  self-audit:
    name: FlowLock Self-Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: |
          packages/*/dist
          apps/*/dist
        key: ${{ runner.os }}-build-${{ github.sha }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages (if cache miss)
      run: pnpm build
    
    - name: Run FlowLock inventory on examples
      run: |
        cd examples/complete-reference
        ../../packages/cli/dist/index.js inventory
      continue-on-error: true
    
    - name: Run FlowLock audit on examples
      run: |
        cd examples/complete-reference
        ../../packages/cli/dist/index.js audit --junit
      continue-on-error: true
    
    - name: Export FlowLock diagrams
      run: |
        cd examples/complete-reference
        ../../packages/cli/dist/index.js export svg
        ../../packages/cli/dist/index.js export csv
      continue-on-error: true
    
    - name: Upload FlowLock artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: flowlock-artifacts
        path: |
          examples/complete-reference/artifacts/
        retention-days: 30
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: FlowLock Validation Results
        path: examples/complete-reference/artifacts/results.junit.xml
        reporter: java-junit
        fail-on-error: false

  # Job 4: Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit
      continue-on-error: true
    
    - name: Check for outdated dependencies
      run: pnpm outdated
      continue-on-error: true

  # Job 5: Build Matrix (Multiple Node Versions)
  compatibility:
    name: Node ${{ matrix.node-version }} Compatibility
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        node-version: ['18', '20', '21']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Run basic tests
      run: pnpm test --reporter=basic
      timeout-minutes: 5

  # Job 6: Performance Benchmarks (on main branch only)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Restore build artifacts
      uses: actions/cache@v4
      with:
        path: |
          packages/*/dist
          apps/*/dist
        key: ${{ runner.os }}-build-${{ github.sha }}
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run performance benchmarks
      run: |
        cd examples/complete-reference
        echo "Running audit performance test..."
        time ../../packages/cli/dist/index.js audit --silent
        echo "Running inventory performance test..."
        time ../../packages/cli/dist/index.js inventory --silent
      continue-on-error: true

  # Job 7: Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README links
      run: |
        # Check for broken links in README files
        find . -name "README.md" -not -path "./node_modules/*" | head -10
        echo "✅ README files found"
    
    - name: Validate documentation structure
      run: |
        # Check required documentation files exist
        files=("README.md" "CONTRIBUTING.md" "docs/API_REFERENCE.md" "docs/QUICK_REFERENCE.md")
        for file in "${files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
            exit 1
          fi
        done
    
    - name: Check examples directory
      run: |
        if [[ -d "examples/complete-reference" ]]; then
          echo "✅ Complete reference example exists"
          if [[ -f "examples/complete-reference/uxspec.json" ]]; then
            echo "✅ Example uxspec.json exists"
          else
            echo "❌ Missing example uxspec.json"
            exit 1
          fi
        else
          echo "❌ Missing complete reference example"
          exit 1
        fi

# Summary job that aggregates results
summary:
  name: CI Summary
  runs-on: ubuntu-latest
  needs: [test, e2e, self-audit, security, docs]
  if: always()
  
  steps:
  - name: Check results
    run: |
      echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
      echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
      echo "| Build and Test | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| E2E Tests | ${{ needs.e2e.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| FlowLock Self-Audit | ${{ needs.self-audit.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| Security & Quality | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "| Documentation | ${{ needs.docs.result }} |" >> $GITHUB_STEP_SUMMARY
      echo "" >> $GITHUB_STEP_SUMMARY
      
      if [[ "${{ needs.test.result }}" == "success" && "${{ needs.e2e.result }}" == "success" ]]; then
        echo "🎉 All critical tests passed!" >> $GITHUB_STEP_SUMMARY
      else
        echo "❌ Some critical tests failed." >> $GITHUB_STEP_SUMMARY
      fi