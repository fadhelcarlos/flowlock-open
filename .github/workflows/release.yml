name: Release

on:
  push:
    branches: [ main ]
    paths:
      - '.changeset/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.repository_owner == 'yourusername' # Replace with actual owner
    
    permissions:
      contents: write
      pull-requests: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        run_install: false
    
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    
    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build all packages
      run: pnpm build
    
    - name: Run tests
      run: pnpm test
    
    - name: Run E2E tests
      run: pnpm test:e2e:ci
      timeout-minutes: 10
    
    - name: Run FlowLock self-audit
      run: |
        cd examples/complete-reference
        ../../packages/cli/dist/index.js audit --junit
      continue-on-error: true
    
    - name: Create Release Pull Request or Publish
      id: changesets
      uses: changesets/action@v1
      with:
        publish: pnpm release
        commit: 'chore: release packages'
        title: 'Release: New package versions'
        setupGitUser: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Generate release artifacts
      if: steps.changesets.outputs.published == 'true'
      run: |
        cd examples/complete-reference
        ../../packages/cli/dist/index.js export svg
        ../../packages/cli/dist/index.js export csv
        mkdir -p ../../release-artifacts
        cp -r artifacts/* ../../release-artifacts/ || true
    
    - name: Upload release artifacts
      if: steps.changesets.outputs.published == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/
        retention-days: 90
    
    - name: Create GitHub Release
      if: steps.changesets.outputs.published == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const releases = ${{ steps.changesets.outputs.publishedPackages }};
          
          for (const release of releases) {
            const { name, version } = release;
            const tagName = `${name}@${version}`;
            
            // Create a release for each published package
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `${name} v${version}`,
                body: `Released ${name} version ${version}\\n\\nSee CHANGELOG.md for details.`,
                draft: false,
                prerelease: version.includes('alpha') || version.includes('beta') || version.includes('rc')
              });
              
              console.log(`Created release for ${tagName}`);
            } catch (error) {
              console.log(`Release ${tagName} might already exist: ${error.message}`);
            }
          }
    
    - name: Update documentation site
      if: steps.changesets.outputs.published == 'true'
      run: |
        echo "TODO: Trigger documentation site rebuild"
        # You can add a webhook call or deployment trigger here
    
    - name: Post-release notifications
      if: steps.changesets.outputs.published == 'true'
      run: |
        echo "ðŸ“¦ Packages published successfully!"
        echo "Published packages:"
        echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[] | "- \(.name)@\(.version)"'
    
    - name: Cleanup
      if: always()
      run: |
        # Clean up any temporary files
        rm -rf node_modules/.cache || true
        rm -rf /tmp/flowlock-* || true