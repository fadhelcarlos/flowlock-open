name: FlowLock UX Audit

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - run: pnpm install

      # Build all workspace packages so ./packages/cli/dist/index.js exists
      # Build dependencies first to ensure type definitions are available
      - name: Build dependencies first
        run: pnpm -r --filter flowlock-uxspec --filter flowlock-plugin-sdk build
      
      - name: Build all packages
        run: pnpm -r --filter "./packages/*" build

      - name: Run FlowLock audit
        run: pnpm -w uxcg audit

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flowlock-artifacts
          path: |
            artifacts/er.svg
            artifacts/flow.svg
            artifacts/screens.csv
            artifacts/results.junit.xml
            artifacts/gap_report.md
            artifacts/acceptance_criteria.feature
            artifacts/er.mmd
            artifacts/flow.mmd

      - name: Post audit summary to FlowLock Cloud
        if: always()
        env:
          CLOUD_URL: ${{ secrets.FLOWLOCK_CLOUD_URL }}
          PROJECT_ID: ${{ secrets.FLOWLOCK_PROJECT_ID }}
          TOKEN: ${{ secrets.FLOWLOCK_TOKEN }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const outDir = 'artifacts';
          const junit = path.join(outDir, 'results.junit.xml');

          // default stats
          let stats = { tests: 0, failures: 0, errors: 0, skipped: 0 };

          try {
            const xml = fs.readFileSync(junit, 'utf8');
            const m = xml.match(/tests="(\d+)"[^>]*failures="(\d+)"[^>]*errors="(\d+)"[^>]*skipped="(\d+)"/);
            if (m) stats = { tests: +m[1], failures: +m[2], errors: +m[3], skipped: +m[4] };
          } catch {}

          const artifacts = [
            'er.svg',
            'flow.svg',
            'screens.csv',
            'results.junit.xml',
            'gap_report.md',
            'acceptance_criteria.feature',
            'er.mmd',
            'flow.mmd',
          ].filter(f => fs.existsSync(path.join(outDir, f)));

          const payload = {
            project: process.env.PROJECT_ID || 'demo',
            kind: 'junit',
            payload: { stats, artifacts }
          };

          fs.writeFileSync('cloud-payload.json', JSON.stringify(payload));
          NODE

          curl -fsS -X POST "${CLOUD_URL%/}/ingest" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TOKEN}" \
            --data-binary @cloud-payload.json || true

      - uses: actions/github-script@v7
        if: ${{ always() && github.event_name == 'pull_request' }}
        env:
          CLOUD_URL: ${{ secrets.FLOWLOCK_CLOUD_URL }}
          PROJECT_ID: ${{ secrets.FLOWLOCK_PROJECT_ID }}
        with:
          script: |
            const url = `${process.env.CLOUD_URL.replace(/\/$/,'')}/dashboard?project=${process.env.PROJECT_ID}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `FlowLock: **audit complete** â†’ ${url}`
            });
