name: FlowLock UX Audit
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - run: pnpm install

      #  Build the workspace packages so ./packages/cli/dist/index.js exists
      - name: Build packages
        run: pnpm -r --filter "./packages/*" build

      - name: Run FlowLock audit
        run: pnpm -w uxcg audit

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flowlock-artifacts
          path: |
            artifacts/er.svg
            artifacts/flow.svg
            artifacts/screens.csv
            artifacts/results.junit.xml
            artifacts/gap_report.md
            artifacts/acceptance_criteria.feature

      - name: Post audit summary to FlowLock Cloud
        if: always()
        env:
          CLOUD_URL: ${{ secrets.FLOWLOCK_CLOUD_URL }}
          PROJECT_ID: ${{ secrets.FLOWLOCK_PROJECT_ID }}
          TOKEN: ${{ secrets.FLOWLOCK_TOKEN }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const outDir = 'artifacts';
          const payload = {
            project: process.env.PROJECT_ID || 'demo',
            kind: 'audit',
            payload: {
              checks: [], // optionally parse JUnit here
              artifacts: [
                'er.svg',
                'flow.svg',
                'screens.csv',
                'results.junit.xml',
                'gap_report.md',
                'acceptance_criteria.feature'
              ].filter(f => fs.existsSync(path.join(outDir, f))),
              startedAt: new Date().toISOString(),
              finishedAt: new Date().toISOString()
            }
          };

          const url = (process.env.CLOUD_URL || '').replace(/\/$/, '') + '/ingest';
          const headers = { 'content-type': 'application/json' };
          if (process.env.TOKEN) headers['authorization'] = `Bearer ${process.env.TOKEN}`;

          fetch(url, { method: 'POST', headers, body: JSON.stringify(payload) })
            .then(r => r.text())
            .then(t => console.log('Cloud response:', t))
            .catch(e => { console.error('Cloud post failed:', e.message); process.exit(0); });
          NODE
